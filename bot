function say(msg)
    game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(msg, "All")
end

if current and type(current.Disconnect) == "function" then
    current:Disconnect()
end

if slashtorespond then
    say("Chatbot loaded. Say /botin [msg] to chat with a bot")
end

function send(conversation_msg, conversation_id)
    conversation_msg = conversation_msg:gsub(" ", "+")
    local url = "https://api.llama.ai/v1/complete" -- LLaMA API endpoint

    local requestBody = {
        messages = {
            { role = "user", content = conversation_msg }
        },
        functions = {
            {
                name = "get_current_weather",
                description = "Get the current weather in a given location",
                parameters = {
                    type = "object",
                    properties = {
                        location = {
                            type = "string",
                            description = "The city and state, e.g. San Francisco, CA"
                        },
                        days = {
                            type = "number",
                            description = "for how many days ahead you want the forecast"
                        },
                        unit = { type = "string", enum = {"celsius", "fahrenheit"} }
                    },
                },
                required = {"location", "days"}
            }
        },
        stream = false,
        function_call = "get_current_weather"
    }

    local r = (syn and syn.request or http_request or request)({
        Url = url,
        Method = "POST",
        Headers = {
            ["Authorization"] = "Bearer LA-28f7dad8ca9448f699a0415de82c9a7d95ff9ae80cc94fffa596f521873135a9",
            ["Content-Type"] = "application/json"
        },
        Body = game.HttpService:JSONEncode(requestBody)
    })

    if r.Success and #r.Body > 0 then
        local responseData = game.HttpService:JSONDecode(r.Body)
        local reply = responseData.choices and responseData.choices[1] and responseData.choices[1].text or "No response from API."
        return reply:gsub("BOT_NAME", bot_name):gsub("BOT_OWNER", bot_owner)
    end
end

local recognized = {}

getgenv().current = game.ReplicatedStorage.DefaultChatSystemChatEvents.OnMessageDoneFiltering.OnClientEvent:Connect(function(msgg)
    local msg = msgg.Message
    local plr = game.Players[msgg.FromSpeaker]
    
    if msg:sub(1, 13) == "/chatbot stop" then
        current:Disconnect()
        return
    end
    if plr == game.Players.LocalPlayer or not plr.Character or not plr.Character:FindFirstChild("HumanoidRootPart") then
        return
    end
    if (plr.Character.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude > max_dist then
        return
    end

    if (slashtorespond and msg:sub(1, 6) == "/botin" or slashtorespond == false) then
        if slashtorespond then
            msg = msg:sub(8, #msg)
        end
        if not recognized[plr.Name] then
            local recognization_id = ((game.Players.LocalPlayer.Name)..(plr.Name)):lower()

            send("My name is "..plr.Name, recognization_id)
            send("Yes"                  , recognization_id)

            recognized[plr.Name] = recognization_id
        end
        if recognized[plr.Name] ~= nil then
            local reply = send(msg, recognized[plr.Name])
            say(reply)
        end
    end
end)
